-- Get necessary services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")
local PathfindingService = game:GetService("PathfindingService")

-- Player and character information
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- Save original position
	if humanoidRootPart and humanoidRootPart.Parent then
		originalPosition = humanoidRootPart.CFrame
	end

-- Main container for GUI
local playerGui = player:WaitForChild("PlayerGui")
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ChestOpenerGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

-- Table for managing messages
local messages = {}
local MAX_MESSAGES = 5
local MESSAGE_DURATION = 6

-- HUD Counter
local hudCounter = Instance.new("TextLabel")
hudCounter.Name = "CooldownCounter"
hudCounter.Parent = screenGui
hudCounter.Size = UDim2.new(0.15, 0, 0.05, 0)
hudCounter.Position = UDim2.new(0.84, 0, 0.01, 0)
hudCounter.BackgroundTransparency = 0.5
hudCounter.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
hudCounter.TextScaled = true
hudCounter.Font = Enum.Font.SourceSansBold
hudCounter.TextColor3 = Color3.fromRGB(255, 255, 255)
hudCounter.TextStrokeTransparency = 0.5
hudCounter.Text = "Ready"

-- Frame and ListLayout for displaying messages
local messageFrame = Instance.new("Frame")
messageFrame.BackgroundTransparency = 1
messageFrame.Size = UDim2.new(0.4, 0, 0.25, 0)
messageFrame.Position = UDim2.new(0.3, 0, 0.74, 0)
messageFrame.Parent = screenGui

local messageListLayout = Instance.new("UIListLayout")
messageListLayout.Parent = messageFrame
messageListLayout.SortOrder = Enum.SortOrder.LayoutOrder
messageListLayout.Padding = UDim.new(0, 5)

-- Script enabled check
local scriptEnabled = true

-- Message creation function
local function createMessage(text)
	if not screenGui or not screenGui.Parent then return end -- Don't create message if GUI doesn't exist

	-- Remove oldest message if there are too many
	while #messages >= MAX_MESSAGES do
		local oldestMessage = table.remove(messages, 1)
		if oldestMessage and oldestMessage.Parent then
			oldestMessage:Destroy()
		end
	end

	local textLabel = Instance.new("TextLabel")
	textLabel.Name = "StatusMessage"
	textLabel.Size = UDim2.new(1, 0, 0.15, 0)
	textLabel.BackgroundTransparency = 0.4
	textLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	textLabel.TextScaled = true
	textLabel.Font = Enum.Font.SourceSansSemibold
	textLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
	textLabel.TextStrokeTransparency = 0.8
	textLabel.Text = " " .. text
	textLabel.TextXAlignment = Enum.TextXAlignment.Left
	textLabel.LayoutOrder = #messages + 1
	textLabel.Parent = messageFrame

	table.insert(messages, textLabel)

	-- Update message order
	for i, msg in ipairs(messages) do
		msg.LayoutOrder = i
	end

	-- Message deletion timer
	task.delay(MESSAGE_DURATION, function()
		if textLabel and textLabel.Parent then
			local index = table.find(messages, textLabel)
			if index then
				table.remove(messages, index)
				-- Update remaining message order
				for i, msg in ipairs(messages) do
					msg.LayoutOrder = i
				end
			end
			textLabel:Destroy()
		end
	end)
end

-- Function to press E key
local function pressEKey()
	createMessage("‚ö° Pressing E key...")
	VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
	task.wait(0.05)
	VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
	createMessage("‚úîÔ∏è E key pressed.")
end

-- Find nearest object
local function findNearestObject(objectNamePrefix)
	local closestObj = nil
	local closestDistance = math.huge
	if not humanoidRootPart or not humanoidRootPart.Parent then return nil, math.huge end -- Exit if no character
	local rootPos = humanoidRootPart.Position
	local searchArea = Workspace

	for _, obj in ipairs(searchArea:GetDescendants()) do
		if obj.Name:lower():match("^"..objectNamePrefix:lower()) and (obj:IsA("Model") or obj:IsA("BasePart")) then
			local partToCheck = nil
			if obj:IsA("Model") then
				partToCheck = obj.PrimaryPart or obj:FindFirstChild("Hitbox") or obj:FindFirstChildWhichIsA("BasePart")
			else
				partToCheck = obj
			end

			if partToCheck and partToCheck:IsA("BasePart") then
				local distance = (rootPos - partToCheck.Position).Magnitude
				if distance < closestDistance then
					closestDistance = distance
					closestObj = obj
				end
			end
		end
	end
	return closestObj, closestDistance
end

-- Teleport to object
local function teleportToObject(targetObject)
	if not targetObject then return false end
	if not humanoidRootPart or not humanoidRootPart.Parent then return false end -- Exit if no character

	local targetPart = nil
	if targetObject:IsA("Model") then
		targetPart = targetObject.PrimaryPart or targetObject:FindFirstChild("Hitbox") or targetObject:FindFirstChildWhichIsA("BasePart")
	elseif targetObject:IsA("BasePart") then
		targetPart = targetObject
	end

	if not targetPart then
		createMessage("‚ùå Couldn't find a part to teleport to on target object!")
		return false
	end

	local targetCFrame = targetPart.CFrame * CFrame.new(0, 3, -5)
	humanoidRootPart.CFrame = targetCFrame
	task.wait(0.2)
	return true
end

-- **** NEW HELPER FUNCTION ****
-- Convert seconds to "X min Y sec" format
local function formatTime(totalSeconds)
	if totalSeconds <= 0 then
		return "0 sec"
	end
	local minutes = math.floor(totalSeconds / 60)
	local seconds = totalSeconds % 60

	if minutes > 0 then
		return string.format("%d min %d sec", minutes, seconds)
	else
		return string.format("%d sec", seconds)
	end
end
-- **** END OF NEW HELPER FUNCTION ****

-- Open nearest chest (with 2.5 sec wait)
local function openNearestChest(chestName)
	createMessage("üîç Searching for "..chestName.."...")

	local chest, distance = findNearestObject(chestName)
	if not chest then
		createMessage("üö´ "..chestName.." not found!")
		return false
	end

	createMessage(string.format("‚úÖ %s found! Distance: %.1f", chestName, distance))

	if teleportToObject(chest) then
		createMessage("‚û°Ô∏è Teleported next to "..chestName..".")
		task.wait(0.1)

		pressEKey() -- Press E key

		createMessage(string.format("‚è≥ Waiting 2.5 sec after interacting with %s...", chestName))
		task.wait(2.5) -- <<< 2.5 second wait >>>

		createMessage("üëç Interaction with "..chestName.." completed.")
		return true
	else
		createMessage("‚ùå Failed to teleport next to "..chestName.."!")
		return false
	end
end

-- HUD Counter Function (Updated with Time Format)
local COOLDOWN_SECONDS = 120
local function startCountdown()
	-- Don't start countdown if script is disabled
	if not scriptEnabled then return end

    createMessage(string.format("‚è≥ %s cooldown started...", formatTime(COOLDOWN_SECONDS)))
    hudCounter.TextColor3 = Color3.fromRGB(255, 100, 100)

    for i = COOLDOWN_SECONDS, 0, -1 do
		-- Check if script is still enabled at each step
		if not scriptEnabled then
             createMessage("‚è≥ Countdown canceled (Script stopped).")
			 hudCounter.Text = "Stopped"
    		 hudCounter.TextColor3 = Color3.fromRGB(200, 200, 200)
             return -- Early exit from function
        end
        hudCounter.Text = formatTime(i) -- <<< formatTime Usage
        task.wait(1)
    end

    -- Check again when loop ends (rare case where it might be stopped during task.wait(1))
    if scriptEnabled then
        hudCounter.Text = "‚úÖ Ready!"
        hudCounter.TextColor3 = Color3.fromRGB(100, 255, 100)
        createMessage("üëç Cooldown finished, starting new round.")
	else
		-- If stopped at the last moment of the loop
		hudCounter.Text = "Stopped"
		hudCounter.TextColor3 = Color3.fromRGB(200, 200, 200)
	end
end

-- Main processing function
local function processChestsAndReturn()
	-- Don't process if script is disabled
	if not scriptEnabled then return end

	createMessage("üîÑ Starting new round...")
	local successTitanic = openNearestChest("TitanicChest")

	-- Continue if script is still enabled
	if scriptEnabled then
		local successHuge = openNearestChest("HugeChest")
	end

	-- Return and start countdown if script is still enabled
	if scriptEnabled then
		createMessage("üîô Returning to starting point...")
		if humanoidRootPart and humanoidRootPart.Parent then -- Check if still exists
			humanoidRootPart.CFrame = originalPosition
			task.wait(0.3)
		else
			createMessage("‚ùå Couldn't return to starting point (No character?).")
			scriptEnabled = false -- If return fails, it might make sense to stop the script
			return
		end
		startCountdown()
	end
end

-- --- Script Start and Main Loop ---

-- Stop script when GUI is closed/destroyed
screenGui.Destroying:Connect(function()
	scriptEnabled = false
	print("ChestOpenerGUI destroyed, stopping script.")
	-- Try to show one last message, might be visible if GUI still partially exists
	createMessage("üõë Script GUI removed, stopping.")
end)
screenGui:GetPropertyChangedSignal("Enabled"):Connect(function()
	if not screenGui.Enabled then
		scriptEnabled = false
		createMessage("üõë Script GUI disabled, stopping.")
		if hudCounter then
			hudCounter.Text = "Stopped"
    		hudCounter.TextColor3 = Color3.fromRGB(200, 200, 200)
		end
	end
end)

-- Startup message and status
createMessage("üöÄ Automatic Chest Opener Started!")
hudCounter.Text = "‚úÖ Ready!"
hudCounter.TextColor3 = Color3.fromRGB(100, 255, 100)

-- Main loop
while scriptEnabled and task.wait() do
    processChestsAndReturn()
	-- processChestsAndReturn already calls startCountdown at the end
	-- and startCountdown has its own wait. So no additional wait needed here.
end

-- Code that runs after loop ends (when scriptEnabled is false)
if not scriptEnabled then
    print("Automatic Chest Opener main loop stopped.")
	if hudCounter and hudCounter.Parent then -- Write final status if HUD still exists
		hudCounter.Text = "Stopped"
    	hudCounter.TextColor3 = Color3.fromRGB(200, 200, 200)
	end
	-- Maybe other cleanup tasks...
end
